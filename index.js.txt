import React, { useState, useEffect } from 'react';
import { Upload, FileText, Download, Search, Plus, Trash2, Edit3, Save, X, AlertCircle, CheckCircle, Clock } from 'lucide-react';

export default function SistemaOP() {
  const [facturas, setFacturas] = useState([]);
  const [procesando, setProcesando] = useState(false);
  const [filtro, setFiltro] = useState('');
  const [editandoId, setEditandoId] = useState(null);
  const [formData, setFormData] = useState({});
  const [usuario, setUsuario] = useState('');
  const [stats, setStats] = useState({
    totalOP: 0,
    totalFacturas: 0,
    montoTotal: 0,
    ultimaActualizacion: null
  });

  // Datos iniciales
  const datosIniciales = [
    {
      id: 1,
      fechaOP: "08/04/2025",
      numeroOrden: "0001-00000001",
      fechaFactura: "07/04/2025",
      numeroFactura: "2397312",
      proveedor: "CAJA DE PREVISION DE LA INGENI",
      concepto: "Aportes Jubilatorios - Obras Privadas",
      importeNeto: 41961.06,
      iva: "N/A",
      otrosImpuestos: 0.00,
      totalFactura: 41961.06,
      retenciones: 2797.40,
      montoOP: 41961.06,
      sector: "Profesional",
      estado: "Procesado",
      archivo: "caja_prevision.pdf",
      fechaProcesado: "21/08/2025 15:30",
      esPrimeraFacturaOP: true,
      usuario: "Sistema"
    },
    {
      id: 2,
      fechaOP: "03/04/2025",
      numeroOrden: "0001-00000001",
      fechaFactura: "03/04/2025",
      numeroFactura: "00000084",
      proveedor: "TROLETTI ORTIZ JUAN MARIANO",
      concepto: "Honorarios Período 03-2025",
      importeNeto: 3423000.00,
      iva: 0.00,
      otrosImpuestos: 0.00,
      totalFactura: 3423000.00,
      retenciones: "N/A",
      montoOP: 3423000.00,
      sector: "Servicios Prof.",
      estado: "Procesado",
      archivo: "troletti_honorarios.pdf",
      fechaProcesado: "21/08/2025 15:31",
      esPrimeraFacturaOP: true,
      usuario: "Sistema"
    },
    {
      id: 4,
      fechaOP: "07/04/2025",
      numeroOrden: "0001-00000002",
      fechaFactura: "01/04/2025",
      numeroFactura: "0089-00004728",
      proveedor: "PINTURERIA SZUMIK SA",
      concepto: "AA CINTA AUTOM. AMARILLA C974 48X40",
      importeNeto: 15867.77,
      iva: 3332.23,
      otrosImpuestos: 0.00,
      totalFactura: 19438.02,
      retenciones: 238.02,
      montoOP: 437962.82,
      sector: "Pinturería",
      estado: "Procesado",
      archivo: "szumik_multiple_facturas.pdf",
      fechaProcesado: "21/08/2025 15:33",
      esPrimeraFacturaOP: true,
      usuario: "Sistema"
    },
    {
      id: 5,
      fechaOP: "07/04/2025",
      numeroOrden: "0001-00000002",
      fechaFactura: "03/04/2025",
      numeroFactura: "0089-00004739",
      proveedor: "PINTURERIA SZUMIK SA",
      concepto: "Varios productos pinturería",
      importeNeto: 348429.75,
      iva: 73170.25,
      otrosImpuestos: 0.00,
      totalFactura: 426826.45,
      retenciones: 5226.45,
      montoOP: 0,
      sector: "Pinturería",
      estado: "Procesado",
      archivo: "szumik_multiple_facturas.pdf",
      fechaProcesado: "21/08/2025 15:33",
      esPrimeraFacturaOP: false,
      usuario: "Sistema"
    },
    {
      id: 6,
      fechaOP: "07/04/2025",
      numeroOrden: "0001-00000002",
      fechaFactura: "01/04/2025",
      numeroFactura: "0089-00000169",
      proveedor: "PINTURERIA SZUMIK SA",
      concepto: "NORTON CINTA ENMASC. UV AZUL 24X50 (Nota de Crédito)",
      importeNeto: 6776.85,
      iva: 1423.14,
      otrosImpuestos: 0.00,
      totalFactura: -8301.65,
      retenciones: 101.65,
      montoOP: 0,
      sector: "Pinturería",
      estado: "Procesado",
      archivo: "szumik_multiple_facturas.pdf",
      fechaProcesado: "21/08/2025 15:33",
      esPrimeraFacturaOP: false,
      usuario: "Sistema"
    }
  ];

  // Cargar datos al iniciar
  useEffect(() => {
    const datosGuardados = typeof window !== 'undefined' ? localStorage.getItem('vescap-facturas') : null;
    const usuarioGuardado = typeof window !== 'undefined' ? localStorage.getItem('vescap-usuario') : null;
    
    if (datosGuardados) {
      const facturasParseadas = JSON.parse(datosGuardados);
      setFacturas(facturasParseadas);
      calcularStats(facturasParseadas);
    } else {
      setFacturas(datosIniciales);
      calcularStats(datosIniciales);
      if (typeof window !== 'undefined') {
        localStorage.setItem('vescap-facturas', JSON.stringify(datosIniciales));
      }
    }

    if (usuarioGuardado) {
      setUsuario(usuarioGuardado);
    }
  }, []);

  // Guardar datos automáticamente
  const guardarDatos = (nuevasFacturas) => {
    setFacturas(nuevasFacturas);
    calcularStats(nuevasFacturas);
    if (typeof window !== 'undefined') {
      localStorage.setItem('vescap-facturas', JSON.stringify(nuevasFacturas));
    }
  };

  // Calcular estadísticas
  const calcularStats = (listaFacturas) => {
    const totalFacturas = listaFacturas.length;
    const opUnicas = new Set(listaFacturas.map(f => f.numeroOrden));
    const totalOP = opUnicas.size;
    const montoTotal = listaFacturas
      .filter(f => f.esPrimeraFacturaOP)
      .reduce((sum, factura) => sum + (factura.montoOP || 0), 0);
    
    setStats({
      totalOP,
      totalFacturas,
      montoTotal,
      ultimaActualizacion: new Date().toLocaleString()
    });
  };

  // Configurar usuario
  const configurarUsuario = () => {
    const nombre = prompt('Ingresa tu nombre para identificar tus registros:');
    if (nombre && nombre.trim()) {
      setUsuario(nombre.trim());
      if (typeof window !== 'undefined') {
        localStorage.setItem('vescap-usuario', nombre.trim());
      }
    }
  };

  // Simular procesamiento de PDF
  const procesarPDF = async (archivo) => {
    try {
      setProcesando(true);
      
      if (!usuario) {
        alert('⚠️ Primero configura tu nombre de usuario');
        configurarUsuario();
        return;
      }
      
      await new Promise(resolve => setTimeout(resolve, 2000));

      const numeroOrdenNueva = `0001-${String(stats.totalOP + 1).padStart(8, '0')}`;
      const montoFactura = Math.random() * 500000 + 50000;
      const ivaFactura = montoFactura * 0.21;
      const totalFactura = montoFactura + ivaFactura;

      const nuevaFactura = {
        id: Date.now(),
        fechaOP: new Date().toLocaleDateString('es-ES'),
        numeroOrden: numeroOrdenNueva,
        fechaFactura: new Date().toLocaleDateString('es-ES'),
        numeroFactura: `${archivo.name.substring(0, 3).toUpperCase()}-${Math.floor(Math.random() * 10000)}`,
        proveedor: archivo.name.replace('.pdf', '').toUpperCase(),
        concepto: `Servicios - ${archivo.name}`,
        importeNeto: parseFloat(montoFactura.toFixed(2)),
        iva: parseFloat(ivaFactura.toFixed(2)),
        otrosImpuestos: 0.00,
        totalFactura: parseFloat(totalFactura.toFixed(2)),
        retenciones: Math.random() > 0.5 ? parseFloat((Math.random() * 5000).toFixed(2)) : "N/A",
        montoOP: parseFloat(totalFactura.toFixed(2)),
        sector: Math.random() > 0.5 ? "Servicios" : "Comercial",
        estado: "Procesado",
        archivo: archivo.name,
        fechaProcesado: new Date().toLocaleString(),
        esPrimeraFacturaOP: true,
        usuario: usuario
      };

      const esDuplicado = facturas.some(f => f.numeroFactura === nuevaFactura.numeroFactura);
      if (esDuplicado) {
        alert(`⚠️ Factura duplicada: ${nuevaFactura.numeroFactura}`);
        return;
      }

      const nuevasFacturas = [...facturas, nuevaFactura];
      guardarDatos(nuevasFacturas);
      
      alert(`✅ OP procesada: ${nuevaFactura.numeroOrden}\nMonto: $${nuevaFactura.montoOP.toLocaleString()}\nPor: ${usuario}`);
      
    } catch (error) {
      alert(`❌ Error: ${error.message}`);
    } finally {
      setProcesando(false);
    }
  };

  // Agregar factura adicional
  const agregarFacturaAOP = () => {
    if (!usuario) {
      configurarUsuario();
      return;
    }

    const opExistentes = [...new Set(facturas.map(f => f.numeroOrden))];
    if (opExistentes.length === 0) return;

    const opSeleccionada = opExistentes[Math.floor(Math.random() * opExistentes.length)];
    const montoFactura = Math.random() * 200000 + 20000;
    const ivaFactura = montoFactura * 0.21;
    const totalFactura = montoFactura + ivaFactura;

    const nuevaFactura = {
      id: Date.now(),
      fechaOP: facturas.find(f => f.numeroOrden === opSeleccionada)?.fechaOP || new Date().toLocaleDateString('es-ES'),
      numeroOrden: opSeleccionada,
      fechaFactura: new Date().toLocaleDateString('es-ES'),
      numeroFactura: `ADIC-${Math.floor(Math.random() * 10000)}`,
      proveedor: "PROVEEDOR ADICIONAL SA",
      concepto: `Factura adicional agregada por ${usuario}`,
      importeNeto: parseFloat(montoFactura.toFixed(2)),
      iva: parseFloat(ivaFactura.toFixed(2)),
      otrosImpuestos: 0.00,
      totalFactura: parseFloat(totalFactura.toFixed(2)),
      retenciones: Math.random() > 0.5 ? parseFloat((Math.random() * 3000).toFixed(2)) : "N/A",
      montoOP: 0,
      sector: "Adicional",
      estado: "Manual",
      archivo: "factura_adicional.pdf",
      fechaProcesado: new Date().toLocaleString(),
      esPrimeraFacturaOP: false,
      usuario: usuario
    };

    const nuevasFacturas = facturas.map(f => {
      if (f.numeroOrden === opSeleccionada && f.esPrimeraFacturaOP) {
        return { ...f, montoOP: f.montoOP + totalFactura };
      }
      return f;
    });

    nuevasFacturas.push(nuevaFactura);
    guardarDatos(nuevasFacturas);
    
    alert(`✅ Factura adicional agregada a OP: ${opSeleccionada}\nPor: ${usuario}`);
  };

  // Manejar subida de archivos
  const manejarSubida = async (event) => {
    const archivos = Array.from(event.target.files);
    
    for (const archivo of archivos) {
      if (archivo.type === 'application/pdf') {
        await procesarPDF(archivo);
      } else {
        alert(`⚠️ ${archivo.name} no es un PDF válido`);
      }
    }
    
    event.target.value = '';
  };

  // Filtrar facturas
  const facturasFiltradas = facturas.filter(factura =>
    Object.values(factura).some(value =>
      value?.toString().toLowerCase().includes(filtro.toLowerCase())
    )
  );

  // Exportar a CSV
  const exportarCSV = () => {
    const headers = ['Fecha OP', 'Nº Orden', 'Fecha Factura', 'Nº Factura', 'Proveedor', 'Concepto', 'Imp. Neto', 'IVA', 'Otros Imp.', 'Total Fact.', 'Retenc.', 'Monto OP', 'Sector', 'Estado', 'Usuario'];
    
    const csvContent = [
      headers.join(','),
      ...facturasFiltradas.map(f => [
        f.fechaOP, f.numeroOrden, f.fechaFactura, f.numeroFactura,
        `"${f.proveedor}"`, `"${f.concepto}"`, f.importeNeto, f.iva,
        f.otrosImpuestos, f.totalFactura, f.retenciones, 
        f.esPrimeraFacturaOP ? f.montoOP : '',
        f.sector, f.estado, f.usuario
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `vescap_facturas_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Limpiar todos los datos
  const limpiarDatos = () => {
    if (confirm('⚠️ ¿Estás seguro de eliminar TODOS los datos? Esta acción no se puede deshacer.')) {
      setFacturas([]);
      calcularStats([]);
      if (typeof window !== 'undefined') {
        localStorage.removeItem('vescap-facturas');
      }
      alert('✅ Todos los datos han sido eliminados');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header con usuario */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-3xl font-bold text-gray-800 mb-2">
                🏢 VESCAP SRL - Sistema de Órdenes de Pago
              </h1>
              <p className="text-gray-600">Sistema online para múltiples usuarios</p>
            </div>
            <div className="text-right">
              {usuario ? (
                <div className="bg-blue-100 text-blue-800 px-3 py-2 rounded-lg">
                  <p className="text-sm font-semibold">👤 Usuario: {usuario}</p>
                  <button 
                    onClick={configurarUsuario}
                    className="text-xs text-blue-600 hover:text-blue-800"
                  >
                    Cambiar
                  </button>
                </div>
              ) : (
                <button 
                  onClick={configurarUsuario}
                  className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
                >
                  Configurar Usuario
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Estadísticas */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-blue-500 text-white p-4 rounded-lg">
            <h3 className="text-lg font-semibold">Total OP</h3>
            <p className="text-2xl font-bold">{stats.totalOP}</p>
            <p className="text-xs opacity-80">Órdenes únicas</p>
          </div>
          <div className="bg-purple-500 text-white p-4 rounded-lg">
            <h3 className="text-lg font-semibold">Total Facturas</h3>
            <p className="text-2xl font-bold">{stats.totalFacturas}</p>
            <p className="text-xs opacity-80">Facturas individuales</p>
          </div>
          <div className="bg-green-500 text-white p-4 rounded-lg">
            <h3 className="text-lg font-semibold">Monto Total</h3>
            <p className="text-lg font-bold">${stats.montoTotal.toLocaleString('es-ES', {minimumFractionDigits: 2})}</p>
            <p className="text-xs opacity-80">Sin duplicar</p>
          </div>
          <div className="bg-orange-500 text-white p-4 rounded-lg">
            <h3 className="text-lg font-semibold">Actualizado</h3>
            <p className="text-sm">{stats.ultimaActualizacion ? new Date(stats.ultimaActualizacion).toLocaleTimeString() : 'Nunca'}</p>
            <p className="text-xs opacity-80">Último cambio</p>
          </div>
        </div>

        {/* Controles */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex flex-wrap gap-4 items-center justify-between">
            <div className="flex items-center gap-4">
              <label className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg cursor-pointer flex items-center gap-2 transition-colors">
                <Upload size={20} />
                {procesando ? 'Procesando...' : 'Nueva OP (PDF)'}
                <input
                  type="file"
                  multiple
                  accept=".pdf"
                  onChange={manejarSubida}
                  className="hidden"
                  disabled={procesando}
                />
              </label>
              
              <button
                onClick={agregarFacturaAOP}
                className="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg flex items-center gap-2 transition-colors"
                disabled={procesando || facturas.length === 0}
              >
                <Plus size={20} />
                Factura Adicional
              </button>
              
              {procesando && (
                <div className="flex items-center gap-2 text-blue-600">
                  <Clock className="animate-spin" size={20} />
                  <span>Procesando...</span>
                </div>
              )}
            </div>

            <div className="flex gap-2">
              <button
                onClick={exportarCSV}
                className="bg-gray-700 hover:bg-gray-800 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
              >
                <Download size={20} />
                Exportar CSV
              </button>
              
              <button
                onClick={limpiarDatos}
                className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
              >
                <Trash2 size={20} />
                Limpiar Todo
              </button>
            </div>
          </div>

          {/* Filtro */}
          <div className="mt-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
              <input
                type="text"
                placeholder="🔍 Filtrar por OP, factura, proveedor, concepto, usuario..."
                value={filtro}
                onChange={(e) => setFiltro(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>
        </div>

        {/* Tabla */}
        <div className="bg-white rounded-lg shadow-md overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead className="bg-gray-800 text-white">
                <tr>
                  <th className="px-2 py-3 text-left">Fecha OP</th>
                  <th className="px-2 py-3 text-left">Nº Orden</th>
                  <th className="px-2 py-3 text-left">F. Fact.</th>
                  <th className="px-2 py-3 text-left">Nº Factura</th>
                  <th className="px-2 py-3 text-left">Proveedor</th>
                  <th className="px-2 py-3 text-left">Concepto</th>
                  <th className="px-2 py-3 text-right">Total Fact.</th>
                  <th className="px-2 py-3 text-right">Monto OP</th>
                  <th className="px-2 py-3 text-center">Sector</th>
                  <th className="px-2 py-3 text-center">Usuario</th>
                </tr>
              </thead>
              <tbody>
                {facturasFiltradas.length === 0 ? (
                  <tr>
                    <td colSpan="10" className="px-4 py-8 text-center text-gray-500">
                      {procesando ? (
                        <div className="flex items-center justify-center gap-2">
                          <Clock className="animate-spin" size={24} />
                          <span>Procesando archivos...</span>
                        </div>
                      ) : facturas.length === 0 ? (
                        <div className="flex flex-col items-center gap-2">
                          <FileText size={48} className="text-gray-300" />
                          <span>No hay facturas cargadas</span>
                          <span className="text-sm">Sube PDFs para comenzar</span>
                        </div>
                      ) : (
                        "No se encontraron facturas con ese filtro"
                      )}
                    </td>
                  </tr>
                ) : (
                  facturasFiltradas.map((factura, index) => {
                    const esNuevaOP = index === 0 || factura.numeroOrden !== facturasFiltradas[index - 1]?.numeroOrden;
                    const rowClass = esNuevaOP ? 'border-t-2 border-blue-200' : '';
                    
                    return (
                      <tr key={factura.id} className={`border-b hover:bg-gray-50 ${rowClass}`}>
                        <td className="px-2 py-2 text-xs">{factura.fechaOP}</td>
                        <td className="px-2 py-2 font-mono text-xs">
                          {esNuevaOP && (
                            <span className="bg-blue-100 text-blue-800 px-1 py-0.5 rounded text-xs mr-1">
                              OP
                            </span>
                          )}
                          {factura.numeroOrden}
                        </td>
                        <td className="px-2 py-2 text-xs">{factura.fechaFactura}</td>
                        <td className="px-2 py-2 font-mono text-xs">{factura.numeroFactura}</td>
                        <td className="px-2 py-2 font-semibold text-xs max-w-xs truncate" title={factura.proveedor}>
                          {factura.proveedor}
                        </td>
                        <td className="px-2 py-2 text-xs max-w-xs truncate" title={factura.concepto}>
                          {factura.concepto}
                        </td>
                        <td className="px-2 py-2 text-right font-mono text-xs">
                          ${factura.totalFactura.toLocaleString('es-ES', {minimumFractionDigits: 2})}
                        </td>
                        <td className="px-2 py-2 text-right font-mono text-xs font-bold">
                          {factura.esPrimeraFacturaOP ? (
                            <span className="bg-green-100 text-green-800 px-2 py-1 rounded">
                              ${factura.montoOP.toLocaleString('es-ES', {minimumFractionDigits: 2})}
                            </span>
                          ) : (
                            <span className="text-gray-400">—</span>
                          )}
                        </td>
                        <td className="px-2 py-2 text-center">
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            factura.estado === 'Procesado' ? 'bg-green-100 text-green-800' :
                            factura.estado === 'Manual' ? 'bg-purple-100 text-purple-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {factura.sector}
                          </span>
                        </td>
                        <td className="px-2 py-2 text-center text-xs">
                          <span className="bg-gray-100 text-gray-700 px-2 py-1 rounded">
                            {factura.usuario}
                          </span>
                        </td>
                      </tr>
                    );
                  })
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* Footer */}
        <div className="mt-6 text-center text-gray-500 text-sm">
          <p>🌐 Sistema Online • Datos sincronizados localmente • VESCAP SRL</p>
          <p>OP: {stats.totalOP} • Facturas: {stats.totalFacturas} • Usuario: {usuario || 'No configurado'}</p>
        </div>
      </div>
    </div>
  );
}